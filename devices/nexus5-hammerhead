#####################################################
# Create Nexus 5 Stock Kernel (4.4+)
#####################################################
f_hammerhead_stock_kernel(){

echo "Downloading Android Toolchian"
if [[ $LOCALGIT == 1 ]]; then
	echo "Copying toolchain to rootfs"
        cp -rf ${basepwd}/arm-eabi-4.7 ${basedir}/toolchain
else
	git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-eabi-4.7 ${basedir}/toolchain
fi

echo "Setting export paths"
# Set path for Kernel building
export ARCH=arm
export SUBARCH=arm
export CROSS_COMPILE=${basedir}/toolchain/bin/arm-eabi-

if [[ $FROZENKERNEL == 1 ]]; then
	echo "Using frozen kernel"
 	cp -rf ${basepwd}/flash/ ${basedir}/flashkernel
	rm -rf ${basedir}/flashkernel/data ${basedir}/flashkernel/sdcard ${basedir}/flashkernel/system/app ${basedir}/flashkernel/META-INF/com/google/android/updater-script
  	cp -rf ${basepwd}/devices/frozen_kernels/4.4.4/n5-hammerhead/* ${basedir}/flashkernel/
  	if [ -f "${basedir}/flash/META-INF/com/google/android/updater-script" ]; then
	  if grep -Fxq "#KERNEL_SCRIPT_START" "${basedir}/flash/META-INF/com/google/android/updater-script"
	  then
	    echo "Kernel already added to main updater-script"
	  else
	    echo "Adding Kernel install to updater-script in main update.zip"
	    cat ${basedir}/flashkernel/META-INF/com/google/android/updater-script >> ${basedir}/flash/META-INF/com/google/android/updater-script
	    cp -f ${basedir}/flashkernel/kernel/kernel ${basedir}/flash/kernel/kernel
	  fi
	fi
else

f_kernel_build_init

cd ${basedir}
echo "Downloading Kernel"
if [[ $LOCALGIT == 1 ]]; then
  echo "Copying kernel to rootfs"
  cp -rf ${basepwd}/furnace_kernel_lge_hammerhead ${basedir}/kernel
else
  git clone https://github.com/binkybear/furnace_kernel_lge_hammerhead.git -b android-4.4 ${basedir}/kernel
fi

cd ${basedir}/kernel

make clean
sleep 10
make kali_defconfig

# Attach kernel builder to updater-script
echo "#KERNEL_SCRIPT_START" >> ${basedir}/flashkernel/META-INF/com/google/android/updater-script
cat << EOF > ${basedir}/flashkernel/META-INF/com/google/android/updater-script
getprop("ro.product.device") == "hammerhead" || abort("This package is for \"hammerhead\" devices; this is a \"" + getprop("ro.product.device") + "\".");

ui_print("* Starting Kernel install for Nexus 5...    *");
ui_print("* Mounting System...                        *");
mount("ext4", "EMMC", "/dev/block/platform/msm_sdcc.1/by-name/system", "/system");
package_extract_dir("system", "/system");
set_perm_recursive(0, 0, 0644, 0644, "/system/lib/modules");
set_perm_recursive(0, 2000, 0755, 0755, "/system/bin");
set_perm_recursive(0, 2000, 0755, 0755, "/system/xbin");
set_perm_recursive(0, 0, 0755, 0755, "/system/etc/init.d");
unmount("/system");

package_extract_dir("kernel", "/tmp");
set_perm(0, 0, 0775, "/tmp/installHH.sh");
set_perm(0, 0, 0755, "/tmp/cleansystem.sh");
set_perm(0, 0, 0755, "/tmp/busybox");
set_perm(0, 0, 0777, "/tmp/makebootimg.sh");
set_perm(0, 0, 0777, "/tmp/mkbootimg");
set_perm(0, 0, 0777, "/tmp/unpackbootimg");

ui_print("* Cleaning /system/app...                   *");
run_program("/tmp/cleansystem.sh");

run_program("/tmp/busybox", "dd", "if=/dev/block/platform/msm_sdcc.1/by-name/boot", "of=/tmp/boot.img");
run_program("/tmp/unpackbootimg", "-i", "/tmp/boot.img", "-o", "/tmp/");
run_program("/tmp/installHH.sh");

ui_print("* Installing Kernel...                      *");
run_program("/tmp/busybox", "dd", "if=/tmp/newboot.img", "of=/dev/block/platform/msm_sdcc.1/by-name/boot");

ui_print("* Kernel installation completed...          *");
EOF

# Start kernel build
f_kernel_build
fi
}

#####################################################
# Create Nexus 5 Stock Kernel (5)
#####################################################
f_hammerhead_stock_kernel5(){

echo "Downloading Android Toolchian"
if [[ $LOCALGIT == 1 ]]; then
	echo "Copying toolchain to rootfs"
        cp -rf ${basepwd}/arm-eabi-4.7 ${basedir}/toolchain
else
	git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-eabi-4.7 ${basedir}/toolchain
fi

echo "Setting export paths"
# Set path for Kernel building
export ARCH=arm
export SUBARCH=arm
export CROSS_COMPILE=${basedir}/toolchain/bin/arm-eabi-

if [[ $FROZENKERNEL == 1 ]]; then
	echo "Using frozen kernel"
 	cp -rf ${basepwd}/flash/ ${basedir}/flashkernel
	rm -rf ${basedir}/flashkernel/data ${basedir}/flashkernel/sdcard ${basedir}/flashkernel/system/app ${basedir}/flashkernel/META-INF/com/google/android/updater-script
  	cp -rf ${basepwd}/devices/frozen_kernels/5/n5-hammerhead/* ${basedir}/flashkernel/
  	if [ -f "${basedir}/flash/META-INF/com/google/android/updater-script" ]; then
	  if grep -Fxq "#KERNEL_SCRIPT_START" "${basedir}/flash/META-INF/com/google/android/updater-script"
	  then
	    echo "Kernel already added to main updater-script"
	  else
	    echo "Adding Kernel install to updater-script in main update.zip"
	    cat ${basedir}/flashkernel/META-INF/com/google/android/updater-script >> ${basedir}/flash/META-INF/com/google/android/updater-script
	    cp -f ${basedir}/flashkernel/kernel/kernel ${basedir}/flash/kernel/kernel
	  fi
	fi
else

f_kernel_build_init

cd ${basedir}
echo "Downloading Kernel"
if [[ $LOCALGIT == 1 ]]; then
  echo "Copying kernel to rootfs"
  cp -rf ${basepwd}/nexus5-5 ${basedir}/kernel
else
  git clone https://github.com/binkybear/kernel_msm.git -b android-msm-hammerhead-3.4-lollipop-release ${basedir}/kernel
fi

cd ${basedir}/kernel

chmod +x scripts/*

make clean
sleep 10
make kali_defconfig

# Attach kernel builder to updater-script
echo "#KERNEL_SCRIPT_START" >> ${basedir}/flashkernel/META-INF/com/google/android/updater-script
cat << EOF > ${basedir}/flashkernel/META-INF/com/google/android/updater-script
getprop("ro.product.device") == "hammerhead" || abort("This package is for \"hammerhead\" devices; this is a \"" + getprop("ro.product.device") + "\".");

ui_print("* Starting Kernel install for Nexus 5...    *");
ui_print("* Mounting System...                        *");
mount("ext4", "EMMC", "/dev/block/platform/msm_sdcc.1/by-name/system", "/system");
package_extract_dir("system", "/system");
set_perm_recursive(0, 0, 0644, 0644, "/system/lib/modules");
set_perm_recursive(0, 2000, 0755, 0755, "/system/bin");
set_perm_recursive(0, 2000, 0755, 0755, "/system/xbin");
set_perm_recursive(0, 0, 0755, 0755, "/system/etc/init.d");
unmount("/system");
package_extract_dir("kernel", "/tmp");
set_perm(0, 0, 0755, "/tmp/cleansystem.sh");
ui_print("* Cleaning /system/app...                   *");
run_program("/tmp/cleansystem.sh");
ui_print("* Installing Kernel...                      *");
package_extract_file("boot.img", "/dev/block/platform/msm_sdcc.1/by-name/boot");
ui_print("* Kernel installation completed...          *");
EOF

f_kernel_build

cd ${basedir}/flashkernel/kernel
abootimg --create ${basedir}/flashkernel/boot.img -f ${basedir}/kernel/ramdisk/5/bootimg.cfg -k ${basedir}/kernel/arch/arm/boot/zImage-dtb -r ${basedir}/kernel/ramdisk/5/initrd.img
cd ${basedir}

if [ -d "${basedir}/flash/" ]; then
	cp ${basedir}/flashkernel/boot.img ${basedir}/flash/boot.img
fi

f_zip_kernel_save
fi
}
